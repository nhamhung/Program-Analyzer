1 - Invalid query syntax; no declarations

Select stmt
none
5000
2 - Invalid query syntax; no synonym following declaration
stmt ;
Select s
none
5000
3 - Invalid query syntax; invalid design entity type
Stmt s;
Select s
none
5000
4 - Invalid query syntax; invalid synonym name
stmt s_;
Select s_
none
5000
5 - Invalid query syntax; invalid 'Select' phrase
stmt s;
select s
none
5000
6 - Invalid query syntax; no space given
stmt s;
Selects
none
5000
7 - Invalid query syntax; additional semicolon at the end
stmt s;
Select s;
none
5000
8 - Invalid query parsing semantics; declared synonym does not match 
stmt s;
Select a
none
5000
10 - Invalid query parsing semantics; multiple declarations of same synonym name
stmt s; while s;
Select s
none
5000
11 - Invalid query syntax with one 'such that' clause; no space between 'such' and 'that'
stmt s;
Select s suchthat Follows(_, _)
none
5000
12 - Invalid query syntax with one 'such that' clause; incomplete design abstraction name
stmt s;
Select s such that Follow(_, _)
none
5000
13 - Invalid query syntax with one 'such that' clause; incorrect ordering of clause
stmt s;
such that Follows(_, _) Select s
none
5000
14 - Invalid query syntax with one 'such that' clause; invalid whitespace within design abstraction
stmt s;
Select s such that Foll ows(_, _)
none
5000
15 - Invalid query syntax with one 'such that' clause; no whitespace after 'such that'
stmt s;
Select s such thatFollows(_, _)
none
5000
16 - Invalid query syntax with one 'such that' clause; missing comma in design abstraction parameters
stmt s;
Select s such that Follows(_ _)
none
5000
17 - Invalid query syntax with one 'such that' clause; missing parentheses in design abstraction parameters
stmt s;
Select s such that Follows _, _
none
5000
18 - Invalid query syntax with one 'such that' clause; parameter value is a floats
stmt s;
Select s such that Follows(_, 1.0)
none
5000
19 - Invalid query syntax with one 'such that' clause; parameter value is an integer with leading 0
stmt s;
Select s such that Follows(01, _)
none
5000
20 - Invalid query syntax with one 'such that' clause; parameter value is negative integer
stmt s;
Select s such that Follows(_, -1)
none
5000
21 - Invalid query syntax with one 'such that' clause; invalid whitespace before asterisk
stmt s;
Select s such that Follows *(_, _)
none
5000
22 - Invalid query parsing semantics with one 'such that' clause; undeclared parameter synonym
stmt s;
Select s such that Follows(s, s1)
none
5000
23 - Invalid query syntax with one 'pattern' clause; whitespace within 'pattern'
assign a;
Select a patt ern a(_, _)
none
5000
24 - Invalid query syntax with one 'pattern' clause; no whitespace after 'pattern'
assign a;
Select a patterna(_, _)
none
5000
25 - Invalid query syntax with one 'pattern' clause; missing comma in parameters
assign a;
Select a pattern a(_ _)
none
5000
26 - Invalid query syntax with one 'pattern' clause; missing parentheses in parameters
assign a;
Select a pattern a _, _
none
5000
27 - Invalid query syntax with one 'pattern' clause; first parameter is integer
assign a;
Select a pattern a(1, _)
none
5000
28 - Invalid query syntax with one 'pattern' clause; first parameter is invalid string
assign a;
Select a pattern a("s_", _)
none
5000
29 - Invalid query syntax with one 'pattern' clause; first parameter is string with spaces
assign a;
Select a pattern a("s s", _)
none
5000
30 - Invalid query syntax with one 'pattern' clause; second parameter has no quotation marks
assign a;
Select a pattern a(_, _a_)
none
5000
31 - Invalid query syntax with one 'pattern' clause; second parameter missing one wildcard token
assign a;
Select a pattern a(_, _"a")
none
5000
32 - Invalid query parsing semantics with one 'pattern' clause; undeclared syn-assign synonym
assign a;
Select a pattern n(_, _)
none
5000
33 - Invalid query parsing semantics with one 'pattern' clause; syn-assign is not of design entity type assign
stmt s; assign a;
Select a pattern s(_, _)
none
5000
34 - Invalid query parsing semantics with one 'pattern' clause; first parameter is undeclared synonym
assign a;
Select a pattern a(s, _)
none
5000
35 - Invalid query parsing semantics with one 'pattern' clause; pattern expression contains invalid name
assign a;
Select a pattern a(_, _"b_"_)
none
5000
36 - Invalid query parsing semantics with one 'pattern' clause; pattern expression contains invalid characters
assign a;
Select a pattern a(_, _"+"_)
none
5000
38 - Invalid query parsing semantics with one 'pattern' clause; pattern expression is whitespace string
assign a;
Select a pattern a(_, _" "_)
none
5000
39 - Invalid query syntax with one 'such that' and one 'pattern' clause; 'such that' clause valid but 'pattern' clause invalid
stmt s, s1; assign a;
Select a such that Follows(s, s1) pattern a(_, a)
none
5000
40 - Invalid query syntax with one 'such that' and one 'pattern' clause; 'such that' clause invalid and 'pattern' clause valid
stmt s, s1; assign a;
Select a such that FOllows(1s, s) pattern a(_, _)
none
5000
41 - Invalid query parsing semantics with one 'such that' and one 'pattern' clause; undeclared 'such that' synonym
stmt s; assign a;
Select s such that Follows(n, _) pattern a(_, _)
none
5000
42 - Invalid query parsing semantics with one 'such that' and one 'pattern' clause; undeclared 'pattern' clause syn-assign
stmt s; assign a;
Select s such that Follows(s, _) pattern n(_, _)
none
5000
43 - Invalid query parsing semantics with one 'such that' and one 'pattern' clause; syn-assign is not of design entity type assign
stmt s; assign a;
Select s such that Follows(s, _) pattern s(_, _)
none
5000
44 - Invalid query parsing semantics with one 'such that' and one 'pattern' clause; first parameter of 'pattern' clause is undeclared
stmt s; assign a;
Select s such that Follows(s, _) pattern a(n, _)
none
5000
45 - Invalid query parsing semantics with one 'such that' and one 'pattern' clause; pattern expression of 'pattern' clause contains invalid characters
stmt s; assign a;
Select s such that Follows(s, _) pattern a(s, _"b_"_)
none
5000
101 - Invalid query parameters with one 'such that' clause; Follows/T and Parent/T cannot have (INT, NAME)
stmt s;
Select s such that Follows(1, "valid")
none
5000
102 - Invalid query parameters with one 'such that' clause; Follows/T and Parent/T cannot have (INT, VAR)
variable v;
Select v such that Follows*(1, v)
none
5000
103 - Invalid query parameters with one 'such that' clause; Follows/T and Parent/T cannot have (INT, PROC)
procedure p;
Select p such that Parent(1, p)
none
5000
104 - Invalid query parameters with one 'such that' clause; Follows/T and Parent/T cannot have (INT, CONST)
constant c;
Select c such that Parent*(1, c)
none
5000
105 - Invalid query parameters with one 'such that' clause; Follows/T and Parent/T cannot have (NAME, INT)
stmt s;
Select s such that Parent*("valid", 1)
none
5000
106 - Invalid query parameters with one 'such that' clause; Follows/T and Parent/T cannot have (VAR, INT)
variable v;
Select v such that Parent(v, 1)
none
5000
107 - Invalid query parameters with one 'such that' clause; Follows/T and Parent/T cannot have (PROC, INT)
procedure p;
Select p such that Follows*(p, 1)
none
5000
108 - Invalid query parameters with one 'such that' clause; Follows/T and Parent/T cannot have (Const, INT)
constant c;
Select c such that Follows(c, 1)
none
5000
109 - Invalid query parameters with one 'such that' clause; Modifies and Uses cannot have (_, NAME)
stmt s;
Select s such that Modifies(_, "valid")
none
5000
110 - Invalid query parameters with one 'such that' clause; Modifies and Uses cannot have (NAME, NAME)
stmt s;
Select s such that Uses("okay", "valid")
none
5000
111 - Invalid query parameters with one 'such that' clause; Modifies and Uses cannot have (VAR, NAME)
variable v;
Select v such that Modifies(v, "valid")
none
5000
112 - Invalid query parameters with one 'such that' clause; Modifies and Uses cannot have (PROC, NAME)
procedure p;
Select p such that Uses(p, "valid")
none
5000
113 - Invalid query parameters with one 'such that' clause; Modifies and Uses cannot have (INT, INT)
stmt s;
Select s such that Modifies(1, 2)
none
5000
114 - Invalid query parameters with one 'such that' clause; Modifies and Uses cannot have (INT, STMT)
stmt s;
Select s such that Uses(1, s)
none
5000
115 - Invalid query parameters with one 'pattern' clause; first parameter cannot be an integer
assign a;
Select a pattern a(1, _)
none
5000
116 - Invalid query parameters with one 'pattern' clause; pattern expression cannot be an integer
assign a;
Select a pattern a(_, 1)
none
5000
117 - Invalid query parameters with one 'pattern' clause; first parameter cannot be a non-variable design entity type
assign a; while w;
Select a pattern a(w, _)
none
5000
201 - Select all statements in the program
stmt s;
Select s
1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26
5000
202 - Select all variables in the program
variable v;
Select v
a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z
5000
203 - Select all constants in the program
constant c;
Select c
0, 1, 3, 6, 16
5000
204 - Select all assigns in the program
assign a;
Select a
2, 6, 7, 8, 9, 12, 17, 20, 26
5000
205 - Select all reads in the program
read r;
Select r
10, 11, 15, 19, 23
5000
206 - Select all prints in the program
print pn;
Select pn
4, 16, 21, 25
5000
207 - Select all ifs in the program
if ifs;
Select ifs
1, 5, 13, 14
5000
208 - Select all whiles in the program
while w;
Select w
3, 18, 22, 24
5000
209 - Select all procedures in the program
procedure p;
Select p
main
5000
210 - Valid Follows(INT, INT) consecutive statements returns all whiles
while w;
Select w such that Follows(4, 5)
3, 18, 22, 24
5000
211 - Valid Follows(INT, INT) reversed returns none
while w;
Select w such that Follows(5, 4)
none
5000
212 - Valid Follows(INT, INT) statements consecutive in stmtLst but not line number returns all procedures
procedure p;
Select p such that Follows(1, 13)
main
5000
213 - Valid Follows(INT, DE), DE is the last statement of its kind returns selected assign
assign a;
Select a such that Follows(24, a)
26
5000
214 - Valid Follows(INT, DE), DE appears right after INT but in a child stmtLst returns none
stmt s; read r;
Select s such that Follows(22, r)
none
5000
215 - Valid Follows(INT, _) for second last statement returns all whiles
while w;
Select w such that Follows(19, _)
3, 18, 22, 24
5000
216 - Valid Follows(INT, _) for last statement in the program returns none
stmt s;
Select s such that Follows(26, _)
none
5000
217 - Valid Follows(DE, INT) where DE is a container statement returns specified DE stmt
if ifs;
Select ifs such that Follows(ifs, 22)
13
5000
218 - Valid Follows(DE, INT) where the specified statement is of the DE type returns none
stmt s; read r;
Select s such that Follows(r, 19)
none
5000
219 - Valid Follows(DE, _) returns only instances of DE that are not the last in the stmtLst
read r;
Select r such that Follows(r, _)
10, 11, 19
5000
220 - Valid Follows(DE, DE) returns only instances of the DE that comes after that specified DE
assign a; while w;
Select w such that Follows(a, w)
3
5000
221 - Valid Follows(DE, DE), both synonyms are exactly the same return none
read r;
Select r such that Follows(r, r)
none
5000
222 - Valid Follows(DE, DE), different synonyms of same DE type returns all while statements that come before another
while w1, w2;
Select w1 such that Follows(w1, w2)
22
5000
223 - Valid Follows(_, INT) returns all procedures
procedure p;
Select p such that Follows(_, 20)
main
5000
224 - Valid Follows(_, INT) for first statement of nested stmtLst returns none
stmt s;
Select s such that Follows(_, 9)
none
5000
225 - Valid Follows(_, DE) extra whitespace return all instances of specified DE
if ifs;
Select ifs such that Follows(_, ifs   )
5, 13
5000
226 - Valid Follows(_, DE) for DE that only occurs at start of every stmtLst returns none
assign a; print pn;
Select a such that Follows(_, pn)
none
5000
227 - Valid Follows(_, _) returns all variables
variable v;
Select v such that Follows(_, _)
a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z
5000
228 - Valid Follows query with tricky names
stmt stmt, Follows; while while, if, Select;
Select Select such that Follows(Follows, if)
3, 18, 22, 24
5000
229 - Valid Follows*(INT, INT) non-consecutive stmts same stmtLst returns all ifs
if ifs;
Select ifs such that Follows*(9, 12)
1, 5, 13, 14
5000
230 - Valid Follows*(INT, INT) consecutive line number in different stmtLst returns none
stmt s;
Select s such that Follows*(21, 23)
none
5000
231 - Valid excessive whitespace Follows*(INT, DE) returns specified read statements in same stmtList as 14
read r;
Select r    such that Follows*        (9   , r  )
10, 11
5000
232 - Valid Follows*(INT, DE) where DE does not exist in same stmtLst return none
print pn;
Select pn such that Follows*(1, pn)
none
5000
233 - Valid Follows*(DE, INT) where only assign stmts that are before 11 are returned
assign a;
Select a such that Follows*(a, 11)
9
5000
234 - Valid Follows*(DE, INT) where DE does not exist in same stmtLst return none
read r; stmt s;
Select s such that Follows*(r, 16)
none
5000
235 - Valid Follows*(DE, DE) where only DEs in the same stmtLsts are returned
while w; assign a;
Select w such that Follows*(w, a)
22, 24
5000
236 - Valid Follows*(DE, DE) where DEs exist in the same stmtLst but wrong order return none
print pn; assign a; stmt s;
Select s such that Follows*(a, pn)
none
5000
237 - Valid Parent(INT, DE) where directly nested DE exists on the same level as the stmt return DE
if ifs;
Select ifs such that Parent(13, ifs)
14
5000
238 - Valid Parent(INT, DE) doubly nested child DE return none
stmt s; read r;
Select s such that Parent(13, r)
none
5000
239 - Valid Parent(INT, DE) where directly nested DE exists after some containers return assign stmt
assign a;
Select a such that Parent(3, a)
8
5000
240 - Valid Parent(INT, _) excessive declaration return all procedures
stmt s, s1, s2; procedure p, p1, p2, p3, p4, p5, p6, p7;
Select p7 such that Parent(5, _)
main
5000
241 - Valid Parent(INT, _) non-container statement on parent level return none
stmt s;
Select s such that Parent(2, _)
none
5000
242 - Valid Parent(DE, INT) container DE returns instance that is the parent of given int
if ifs;
Select ifs such that Parent(ifs, 15)
14
5000
243 - Valid Parent(DE, INT) non-container DE returns none
assign a; stmt s;
Select s such that (a, 4)
none
5000
244 - Valid Parent(DE, INT) container DE but stmt not part of container return none
stmt s; if ifs;
Select s such that Parent(ifs, 23)
none
5000
245 - Valid Parent(DE, DE) with exact same synonym return none
if ifs;
Select ifs such that Parent(ifs, ifs)
none
5000
246 - Valid Parent(DE, DE) with same DE type different synonym return parent DE
if if1, if2;
Select if1 such that Parent(if1, if2)
13
5000
247 - Valid Parent(DE, _) parent-level non-container DE return none
assign a;
Select a such that Parent(a, _)
none
5000
248 - Valid Parent(_, INT) non-nested stmt returns false
stmt s;
Select s such that Parent(_, 22)
none
5000
249 - Valid Parent(_, DE) nested DE returns selected nested DEs
if ifs;
Select ifs such that Parent(_, ifs)
5, 14
5000
250 - Valid Parent(_, _) returns all reads
read r;
Select r such that Parent(_,_)
10, 11, 15, 19, 23
5000
251 - Valid Parent*(INT, INT) nested int is in another container returns none
stmt s;
Select s such that Parent*(1, 14)
none
5000
252 - Valid Parent*(INT, DE) where DE is on same level as stmt returns none
stmt s; print pn;
Select s such that Parent*(5, pn)
none
5000
253 - Valid Parent*(INT, DE) stmt is a child of the DE returns none
stmt s; while w;
Select s such that Parent*(5, w)
none
5000
254 - Valid Parent*(DE, INT) stmt is deeply nested in last container returns DE
if ifs;
Select ifs such that Parent*(ifs, 20)
13
5000
255 - Valid Parent*(DE, INT) container DE turns multiple instances that is parent* of the given int
if ifs;
Select ifs such that Parent*(ifs, 7)
1, 5
5000
256 - Valid Parent*(DE, DE) first DE is a child DE
read r; if ifs;
Select r such that Parent*(r, ifs)
none
5000
257 - Valid Uses(INT, NAME), variable is the only variable being used in the statement returns all whiles
while w;
Select w such that Uses(4, "d")
3, 18, 22, 24
5000
258 - Valid Uses(INT, VAR), statement is an assignment statement returns used variables
variable v;
Select v such that Uses(12, v)
j, d, a
5000
259 - Valid Uses(INT, VAR), statement is assigned to a constant only returns none
stmt s; variable v;
Select s such that Uses(2, v)
none
5000
260 - Valid Uses(DE, NAME), DE is print statement returns selected print statements
print pn;
Select pn such that Uses(pn, "q")
16
5000
261 - Valid Uses(DE, NAME), DE is read statement returns none
read r;
Select r such that Uses(r, "m")
none
5000
262 - Valid Uses(DE, VAR), container DE that uses some variable return selected while statements
while w; variable v;
Select w such that Uses(w, v)
3, 18, 24
5000
263 - Valid Uses(INT, _), container statement that does not use any variable return none
stmt s;
Select s such that Uses(22, _)
none
5000
264 - Valid Uses(DE, _) returns all statements that uses variables
stmt s;
Select s such that Uses(s, _)
1, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 16, 17, 18, 20, 21, 24, 25, 26
5000
265 - Valid Modifies(INT, NAME) assignment statement that modifies variable returns all procedures
procedure p;
Select p such that Modifies(9, "j")
main
5000
266 - Valid Modifies(INT, VAR), statement is an assignment statement that uses constants return modified variable
variable v;
Select v such that Modifies(2, v)
b
5000
267 - Valid Modifies(INT, VAR), statement is a container statement that modified variables
variable v;
Select v such that Modifies(13, v)
f, q, s, v
5000
268 - Valid Modifies(INT, VAR), statement only uses variables and not modify
assign a; variable v;
Select a such that Modifies(4, v)
none
5000
269 - Valid Modifies(DE, NAME) where variable only modified by assignment so read DE returns none
read r; stmt s;
Select s such that Modifies(r, "f")
none
5000
270 - Valid Modifies(DE, NAME) variable modified by read statement return read statement
read r;
Select r such that Modifies(r, "m")
11
5000
271 - Valid Modifies(DE, VAR), non-container DE does not modify any variable return none
print pn; variable v;
Select pn such that Modifies(pn, v)
none
5000
272 - Valid Modifies(INT, _), statement does not modify any variable return none
assign a;
Select a such that Modifies(24, _)
none
5000
273 - Valid Modifies(INT, _), container statement modifies some variable in nested statement return all assignment statements
assign a;
Select a such that Modifies(13, _)
2, 6, 7, 8, 9, 12, 17, 20, 26
5000
274 - Valid Modifies(DE, _) read DE returns all read statements
read r;
Select r such that Modifies(r, _)
10, 11, 15, 19, 23
5000
275 - Valid Modifies(DE, _) print DE returns none
print pn; stmt s;
Select s such that Modifies(pn, _)
none
5000
276 - Valid pattern a(_, _) returns all assignment statements
assign a;
Select a pattern a(_, _)
2, 6, 7, 8, 9, 12, 17, 20, 26
5000
277 - Valid pattern a(_, partial match), partial match is a complete match return all associated assign stmts
assign a;
Select a pattern a(_, _"3"_)
2, 12
5000
278 - Valid pattern a(NAME, _), name exists on LHS of some assignment returns selected assignment statements
assign a;
Select a pattern a("z", _)
26
5000
279 - Valid pattern a(NAME, _), name only exists on RHS returns none
assign a;
Select a pattern a("r", _)
none
5000
280 - Valid pattern a(NAME, _), name does not exist in any assignment returns none
assign a;
Select a pattern a("w", _)
none
5000
281 - Valid pattern a(NAME, _), name does not exist in program return none
assign a;
Select a pattern a("cap00", _)
none
5000
282 - Valid pattern a(VAR DE, partial match), returns all variables on LHS of corresponding assign statements
variable v; assign a;
Select v pattern a(v, _"0"_)
d, g
5000
283 - Valid pattern a(VAR DE, partial match), no match returns none
variable v; assign a;
Select v pattern a(v, _"v"_)
none
5000
284 - Valid pattern a(VAR DE, _) returns all assign statements
variable v; assign a;
Select a pattern a(v, _)
2, 6, 7, 8, 9, 12, 17, 20, 26
5000
501 - Valid query with both 'such that' and 'pattern' clause; clauses evaluate to true independently, and selected design entity is independent
while w; assign a; read r;
Select r such that Follows*(2, w) pattern a(_, _"16"_)
10, 11, 15, 19, 23
5000
502 - Valid query with both 'such that' and 'pattern' clause; clauses evaluate to true independently, and selected design entity is dependent
while w; assign a;
Select a such that Follows*(2, w) pattern a(_, _"0"_)
7, 8
5000
503 - Valid query with both 'such that' and 'pattern' clause; clauses evaluate to true dependently, and selected design entity is independent
assign a; while w; variable v; print pn;
Select pn such that Parent(w, a) pattern a(v, _"i"_)
4, 16, 21, 25
5000
504 - Valid query with both 'such that' and 'pattern' clause; clauses evaluate to true dependently, and selected design entity is that dependent synonym
assign a; while w; variable v;
Select a such that Parent(w, a) pattern a(v, _"g"_)
8, 20
5000
505 - Valid query with both 'such that' and 'pattern' clauses; first clause evaluates to true and the other evaluates to false
assign a; variable v;
Select v such that Uses(20, v) pattern a(v, _"123"_)
none
5000
506 - Valid query with both 'such that' and 'pattern' clauses; both evaluate to true dependently but intersection is empty
assign a; variable v;
Select v such that Modifies(17, v) pattern a(v, _"a"_)
none
5000
507 - Valid query with both 'such that' and 'pattern' clauses; both evaluate to true dependently, with dependency on two synonyms, and selected entity is independent
assign a; variable v; procedure p;
Select p such that Modifies(a, v) pattern a(_, _"d"_)
main
5000
508 - Valid query with both 'such that' and 'pattern' clauses; both evaluate to true dependently, with dependency on two synonyms, and selected entity is dependent
assign a; variable v;
Select v such that Uses(a, v) pattern a(v, _"i"_)
g
5000
509 - Valid query with both 'such that' and 'pattern' clauses; both evaluate to true dependently, with dependency on two synonyms, and selected entity is dependent
assign a; variable v;
Select a such that Uses(a, v) pattern a(v, _"0"_)
7, 8
5000
510 - Valid query with both 'such that' and 'pattern' clauses; both evaluate to true dependently, with dependency on one synonym, and selected entity is dependent but not the common synonym
assign a, a1; variable v;
Select a such that Uses(a, v) pattern a1(v, _)
7, 8, 12, 17, 20, 26
5000
511 - Valid query with both 'such that' and 'pattern' clauses; both evaluate to true dependently but intersection set is empty
assign a; if ifs;
Select ifs such that Parent*(ifs, a) pattern a(_, _"y"_)
none
5000
512 - Valid query with both 'such that' and 'pattern' clauses; both evaluate to true dependently, with dependency on one synonym, and selected entity is the intersection synonym
assign a; variable v; if ifs;
Select v such that Uses(ifs, v) pattern a(v, _)
d, f, g, j, n, q
5000
513 - Valid query with both 'such that' and 'pattern' clauses; both evaluate to true dependently, with dependency on one synonym, and selected entity is dependent but not the common synonym
assign a; variable v; print pn;
Select pn such that Uses(pn, v) pattern a(v, _"0"_)
4
5000
514 - Valid query with both 'such that' and 'pattern' clauses; both evaluate to true dependently, with dependency on one synonym, and selected entity is dependent but not the common synonym
assign a; while w; variable v;
Select w such that Uses(w, v) pattern a(v, _"h"_)
3, 18
5000
601 - Valid query with both 'such that' and 'pattern' clauses; excessive valid whitespace is used
			assign				a			
	;			variable	  v			 ;				Select				v			 such that			Uses		( a  ,			 v   )		 pattern			a		(     v  , _	 "i"	_	)     
g
5000
602 - Valid query with both 'such that' and 'pattern' clauses; synonyms used are deliberately confusing
stmt Select, Follows; assign while, pattern; variable Parent;
Select pattern such that Follows(Follows, pattern) pattern pattern(Parent, _"d"_)
12, 20
5000